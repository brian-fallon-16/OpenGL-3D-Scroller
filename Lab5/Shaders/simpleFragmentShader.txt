#version 410

in vec3 position_eye;
in vec3 normal_eye;
in vec2 texture_coordinates;

in vec3 pos;


uniform sampler2D diffuse_map;
uniform sampler2D specular_map;
uniform sampler2D ambient_map;
uniform sampler2D emission_map;

uniform mat4 view;
uniform vec3 light_position_world;
uniform int glow;

out vec4 frag_colour;

//vec3 light_position_world = vec3 (0.0, -8.0, -15.0);
vec3 Ls = vec3 (0.4, 0.4, 0.4); // white specular colour
vec3 Ld = vec3 (0.5, 0.6, 0.7); // dull white diffuse light colour
vec3 La = vec3 (0.2, 0.2, 0.2); // grey ambient colour
float specular_exponent = 2.0; // specular 'power'

void main() 
{
	vec3 light_position_eye = (view * vec4 (light_position_world, 1.0)).xyz;
    // flip textures (upside down for some reason)
    vec2 flipped = vec2 (texture_coordinates.s, 1.0 - texture_coordinates.t);

    // ambient intensity term
	vec3 Ka = texture (ambient_map, flipped).rgb;
	vec3 Ia = La * Ka; 

    // diffuse intensity term
	vec3 Kd = texture (diffuse_map, flipped).rgb;
	vec3 surface_to_light_eye = normalize (light_position_eye - position_eye);
	float dp = max (0.0, dot (normal_eye, surface_to_light_eye));
	vec3 Id = Kd * Ld * dp;         //final diffuse intensity

    // specular intensity term
	vec3 Ks = texture (specular_map, flipped).rgb;
	vec3 surface_to_viewer_eye = normalize (-position_eye);
	vec3 half_way_eye = normalize (surface_to_viewer_eye + surface_to_light_eye);
	float dot_prod_specular = max (dot (half_way_eye, normal_eye), 0.0);
	float specular_factor = pow (dot_prod_specular, specular_exponent);
	vec3 Is = Ls * Ks * specular_factor; // final specular intensity
    
    vec3 texel_e = vec3(0,0,0);
    if(glow == 1)
    {
        texel_e = texture (emission_map, flipped).rgb;   // for "glow in the dark" coordinates
    }

    frag_colour = vec4 (Id + Is + Ia + texel_e, 1.0);
	//frag_colour= vec4 (Ka, 1.0); //just texture coordinates and no lighting
}